//	Библиотека для работы с датчиком тока и напряжения ...: http://
//  Версия: 1.0.0
//  Последнюю версию библиотеки Вы можете скачать по ссылке: http://
//  Подробное описание функции бибилиотеки доступно по ссылке: http://
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел sajaem@narod.ru
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_Wattmeter_h
#define iarduino_Wattmeter_h

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif
//																																	|   15  |   14  |   13  |   12  |   11  |   10  |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   | <- Номера битов
#define	WTM_REG_CONFIGURATION	0		//	Адрес конфигурационного регистра		(ч/з)	|  RST	|	-	|  BRNG |   PG1 - PG0   |      BADC (ADC4 - ADC1)       |      SADC (ADC4 - ADC1)       |     MODE3 - MODE1     |
#define	WTM_REG_VOLTAG_SHUNT	1		//	Адрес регистра напражения на шунте		(ч)		|  SIGN |SIGN/SD|SIGN/SD|SIGN/SD|                                  SD11 - SD0                                                   |
#define	WTM_REG_VOLTAGE_BUS		2		//	Адрес регистра напряжения в шине		(ч)		|                                                                  BD12 - BD0                           |   —   |  CNVR |  OVF  |
#define	WTM_REG_POWER			3		//	Адрес регистра рассчитанной мощности	(ч)		|                                                                  PD15 - PD0                                                   |
#define	WTM_REG_CURRENT			4		//	Адрес регистра рассчитанного тока		(ч)		| CSIGN |                                                          CD14 - CD0                                                   |
#define	WTM_REG_CALIBRATION		5		//	Адрес калибровочного регистра			(ч/з)	|                                                                  FS15 - FS0                                                   |

//	Назначение битов конфигурационного регистра:
//	RST		- Reset						-	установка в 1 приведет к перезагрузке, как при включении питания. Все биты регистров сбросятся в значение по умолчанию, включая и сам бит RST
//	BRNG	- Bus voltage Range			-	диапазон ожидаемых напряжений на шине
//											0		- 16В
//											1		- 32В <- значение по умолчанию
//	PG		- PGA (Programmable gain)	-	коэффициент усиления ТОЛЬКО ДЛЯ НАПРЯЖЕНИЙ ШУНТА. Изменение PGA приводит к изменению диапазона измеряемых напряжений шунта
//											00		- коэффициент усиления PGA = /1, диапазон измеряемых напряжений ± 40  мВ
//											01		- коэффициент усиления PGA = /2, диапазон измеряемых напряжений ± 80  мВ
//											10		- коэффициент усиления PGA = /4, диапазон измеряемых напряжений ± 160 мВ
//											11		- коэффициент усиления PGA = /8, диапазон измеряемых напряжений ± 320 мВ <- значение по умолчанию
//	BADC	- Bus   ADC					-	разрешение и количество выборок АЦП для измерений напряжения шины  
//	SADC	- Shunt ADC					-	разрешение и количество выборок АЦП для измерений напряжения шунта ()
//										-	чем выше разрешение АЦП, тем точнее результат, но дольше происходит измерение
//										-	увеличение количества выборок, приведёт к возможности получения усреднённого значения напряжения (оно не будет "скакать")
//	ADC									-	таблица значений битов ADC применима и для BADC, и для SADC. (* - означает любое состояние бита)
//											0*00	- 9  битный АЦП с   1 выборкой  = время рассчета напряжения составит 84    мкс
//											0*01	- 10 битный АЦП с   1 выборкой  = время рассчета напряжения составит 148   мкс
//											0*10	- 11 битный АЦП с   1 выборкой  = время рассчета напряжения составит 276   мкс
//											0*11	- 12 битный АЦП с   1 выборкой  = время рассчета напряжения составит 532   мкс <- значение по умолчанию
//											1000	- 12 битный АЦП с   1 выборкой  = время рассчета напряжения составит 532   мкс
//											1001	- 12 битный АЦП с   2 выборками = время рассчета напряжения составит 1,064  мс
//											1010	- 12 битный АЦП с   4 выборками = время рассчета напряжения составит 2.128  мс
//											1011	- 12 битный АЦП с   8 выборками = время рассчета напряжения составит 4,256  мс
//											1100	- 12 битный АЦП с  16 выборками = время рассчета напряжения составит 8,512  мс
//											1101	- 12 битный АЦП с  32 выборками = время рассчета напряжения составит 17,024 мс
//											1110	- 12 битный АЦП с  64 выборками = время рассчета напряжения составит 34,048 мс
//											1111	- 12 битный АЦП с 128 выборками = время рассчета напряжения составит 68,096 мс
//	MODE	- режим работы				-	установка одного из предложенных режимов работы
//											000		- Выключить                                    (Power-down)
//											001		- Однократное чтение напряжений с шунта        (Shunt voltage, triggered)
//											010		- Однократное чтение напряжений с шины         (Bus voltage, triggered)
//											011		- Однократное чтение напряжений с шунта и шины (Shunt and bus, triggered)
//											100		- Выключить АЦП                                (ADC off)
//											101		- Непрерывное чтение напряжений с шунта        (Shunt voltage, continuous)
//											110		- Непрерывное чтение напряжений с шины         (Bus voltage, continuous)
//											111		- Непрерывное чтение напряжений с шунта и шины (Shunt and bus, continuous) <- значение по умолчанию


class iarduino_Wattmeter{
	public:		iarduino_Wattmeter		(						uint8_t=0x40);	//	Объявление	экземпляра класса				(							[адрес модуля])
	/**	пользовательские функции **/
		void	begin					();										//	
		void	read					();
//		void	pinMode					(uint8_t,	uint8_t,	uint8_t=0xFF);	//	Установка	режима работы вывода			(№ вывода,	режим работы,	[адрес модуля])
//		bool	digitalRead				(uint8_t,				uint8_t=0xFF);	//	Чтение		логического состояния на входе	(№ вывода,					[адрес модуля])
//		void	digitalWrite			(uint8_t,	bool,		uint8_t=0xFF);	//	Установка	логического состояния на выходе	(№ вывода,	состояние,		[адрес модуля])
	private:
	/**	внутренние переменные **/
		uint8_t	WTM_chip_ADDR;													//	адрес		модуля							(на шине I2C)
		uint8_t	WTM_rgst_ADDR;													//	адрес		регистра						(для чтения/записи)
		uint8_t	WTM_data_MSB;													//	данные		для передачи по шине I2C		(старший байт)
		uint8_t	WTM_data_LSB;													//	данные		для передачи по шине I2C		(младший байт)
	   uint16_t	I2C_mass_STATUS[0x04] =	{100,1000,1,0x78};						//	скорость	работы шины в кГц (макс F_CPU/2), ожидание сброса флага TWINT в циклах, флаг успешного результата, содержимое флагов TWS регистра состояния TWSR
	/**	функции для работы с шиной I2C **/
		void	I2C_func_BEGIN			();										//	установка	скорости работы шины I2C		(без параметров)
		void	I2C_func_START			();										//	выполнение	состояния START					(без параметров)
		void	I2C_func_RESTART		();										//	выполнение	состояния RESTART				(без параметров)
		void	I2C_func_STOP			();										//	выполнение	состояния STOP					(без параметров)
		void	I2C_func_SEND_ID		(uint8_t, bool);						//	передача	первого байта					(ID-адрес модуля, бит RW)
		void	I2C_func_WRITE_BYTE		(uint8_t);								//	передача	одного байта					(байт для передачи)
		uint8_t	I2C_func_READ_BYTE		(bool);									//	получение	одного байта					(бит подтверждения ACK/NACK)
		
		void	I2C_func_READ			();										//	чтение		одного байта из регистра WTM_uint_COMMAND от модуля WTM_uint_ADDRESS в  переменную WTM_uint_DATA
		void	I2C_func_WRITE			();										//	запись		одного байта в  регистр  WTM_uint_COMMAND к  модулю WTM_uint_ADDRESS из переменной WTM_uint_DATA
};

#endif